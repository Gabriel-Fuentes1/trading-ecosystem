version: '3.8'

# Minimal docker-compose for initial testing
# Start with: sudo docker-compose -f docker-compose.minimal.yml up -d

services:
  # Core Database
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: trading_timescaledb
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - timescale_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - trading_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: trading_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - trading_network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./web/api
      dockerfile: Dockerfile
    container_name: trading_api_gateway
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      DATABASE_URL: postgresql://trading_user:${DB_PASSWORD}@timescaledb:5432/trading_db
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    ports:
      - "8000:8000"
    networks:
      - trading_network
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Web Interface
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: trading_web
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      DATABASE_URL: postgresql://trading_user:${DB_PASSWORD}@timescaledb:5432/trading_db
    ports:
      - "3000:3000"
    networks:
      - trading_network
    depends_on:
      - api-gateway
    restart: unless-stopped

volumes:
  timescale_data:
  redis_data:
  rabbitmq_data:

networks:
  trading_network:
    driver: bridge
