version: '3.8'

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================
  
  # TimescaleDB - Primary Database for Time Series Data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: trading_timescaledb
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/indexes.sql:/docker-entrypoint-initdb.d/02-indexes.sql
    ports:
      - "5432:5432"
    networks:
      - trading_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - High Performance Cache
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # HashiCorp Vault - Secrets Management
  vault:
    image: hashicorp/vault:1.17  # Updated to valid Vault version
    container_name: trading_vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
      - ./vault/config.hcl:/vault/config/config.hcl
    ports:
      - "8200:8200"
    networks:
      - trading_network
    restart: unless-stopped
    command: vault server -config=/vault/config/config.hcl

  # =============================================================================
  # DATA ENGINEERING PLATFORM
  # =============================================================================

  # Apache Airflow - Workflow Orchestration
  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: trading_airflow_webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://trading_user:${DB_PASSWORD}@timescaledb:5432/trading_db
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
    ports:
      - "8080:8080"
    networks:
      - trading_network
    depends_on:
      timescaledb:
        condition: service_healthy
    restart: unless-stopped
    command: webserver

  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: trading_airflow_scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://trading_user:${DB_PASSWORD}@timescaledb:5432/trading_db
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
    networks:
      - trading_network
    depends_on:
      timescaledb:
        condition: service_healthy
    restart: unless-stopped
    command: scheduler

  # =============================================================================
  # MLOPS PLATFORM
  # =============================================================================

  # MLflow - Model Registry and Experiment Tracking
  mlflow:
    build:
      context: ./mlops
      dockerfile: Dockerfile
    container_name: trading_mlflow
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://trading_user:${DB_PASSWORD}@timescaledb:5432/trading_db
      MLFLOW_DEFAULT_ARTIFACT_ROOT: /mlflow/artifacts
    volumes:
      - mlflow_data:/mlflow/artifacts
    ports:
      - "5000:5000"
    networks:
      - trading_network
    depends_on:
      timescaledb:
        condition: service_healthy
    restart: unless-stopped

  # =============================================================================
  # TRADING MICROSERVICES
  # =============================================================================

  # RabbitMQ - Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: trading_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - trading_network
    restart: unless-stopped

  api-gateway:
    build:
      context: ./web/api
      dockerfile: Dockerfile
    container_name: trading_api_gateway
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN}
      DATABASE_URL: postgresql://trading_user:${DB_PASSWORD}@timescaledb:5432/trading_db
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    ports:
      - "8000:8000"
    networks:
      - trading_network
    depends_on:
      - redis
      - vault
      - rabbitmq
      - timescaledb
    restart: unless-stopped

  # Decision Service
  decision-service:
    build:
      context: ./services/decision_service
      dockerfile: Dockerfile
    container_name: trading_decision_service
    environment:
      DATABASE_URL: postgresql://trading_user:${DB_PASSWORD}@timescaledb:5432/trading_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      MLFLOW_TRACKING_URI: http://mlflow:5000
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN}
    ports:
      - "8001:8001"
    networks:
      - trading_network
    depends_on:
      - timescaledb
      - redis
      - rabbitmq
      - mlflow
    restart: unless-stopped

  # Risk Management Service
  risk-service:
    build:
      context: ./services/risk_service
      dockerfile: Dockerfile
    container_name: trading_risk_service
    environment:
      DATABASE_URL: postgresql://trading_user:${DB_PASSWORD}@timescaledb:5432/trading_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN}
    ports:
      - "8002:8002"
    networks:
      - trading_network
    depends_on:
      - timescaledb
      - redis
      - rabbitmq
    restart: unless-stopped

  # Execution Service
  execution-service:
    build:
      context: ./services/execution_service
      dockerfile: Dockerfile
    container_name: trading_execution_service
    environment:
      DATABASE_URL: postgresql://trading_user:${DB_PASSWORD}@timescaledb:5432/trading_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN}
    ports:
      - "8003:8003"
    networks:
      - trading_network
    depends_on:
      - timescaledb
      - redis
      - rabbitmq
    restart: unless-stopped

  # =============================================================================
  # WEB INTERFACE
  # =============================================================================

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: trading_web
    environment:
      NEXT_PUBLIC_API_URL: http://api-gateway:8000
      DATABASE_URL: postgresql://trading_user:${DB_PASSWORD}@timescaledb:5432/trading_db
    ports:
      - "3000:3000"
    networks:
      - trading_network
    depends_on:
      - api-gateway
    restart: unless-stopped

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - trading_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana - Dashboards and Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trading_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3001:3000"
    networks:
      - trading_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: trading_loki
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - trading_network
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: trading_jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: 'true'
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - trading_network
    restart: unless-stopped

volumes:
  timescale_data:
  redis_data:
  vault_data:
  rabbitmq_data:
  mlflow_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  trading_network:
    driver: bridge
